#!/usr/bin/env python3

import argparse
import os

import rosbag
from colorama import Fore, Style
from pytictoc import TicToc
from tqdm import tqdm

"""
Usage:

./delete_tfs -bfi original.bag 

"""

if __name__ == "__main__":
    # Parse command line arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-bfi", "--bagfile_in", help='Full path to the bagfile', type=str, required=True)
    ap.add_argument("-bfo", "--bagfile_out", help='Full path to output the bagfile. If not given will be named out.bag and placed on the same folder as the input bag.', type=str, required=False)
    ap.add_argument("-t", "--topics_to_remove", help='Topics to remove from the bagfile. Example: ... -t topic1 topic2 topic3', type=str, required=True,  nargs='+')
    args = vars(ap.parse_args())
    
    if args['bagfile_out'] is None:
        path = os.path.dirname(args['bagfile_in'])
        args['bagfile_out'] = path + '/out.bag'
        
    print('Producing a new bag ' + Fore.BLUE + args['bagfile_out'] + Style.RESET_ALL + ' without topics:\n' + Fore.GREEN + str('\n'.join(args['topics_to_remove'])) + Style.RESET_ALL)

    # --------------------------------------------------------------------------
    # Read the bag input file
    # --------------------------------------------------------------------------
    bag_file = args['bagfile_in']
    print('Loading bagfile ' + bag_file)
    bag = rosbag.Bag(bag_file) # load the bag file
    bag_info = bag.get_type_and_topic_info()
    bag_types = bag_info[0]
    bag_topics = bag_info[1]
    
    # --------------------------------------------------------------------------
    # Initial setup
    # --------------------------------------------------------------------------
    tictoc = TicToc()
    tictoc.tic()
    bag_out = rosbag.Bag(args['bagfile_out'], 'w')
    
    # --------------------------------------------------------------------------
    # Get initial stamp to compute mission time
    # --------------------------------------------------------------------------
    for topic, msg, stamp in bag.read_messages():
        initial_stamp = stamp
        break
    
    # --------------------------------------------------------------------------
    # Writing new bagfile
    # --------------------------------------------------------------------------
    print('Converting bagfile. Please wait...')
    for topic, msg, stamp, connection_header in tqdm(bag.read_messages(return_connection_header=True), total=bag.get_message_count(), desc='Processing bag messages'):
        
        if topic not in args['topics_to_remove']:
            bag_out.write(topic, msg, stamp, connection_header=connection_header)
    
    bag.close() # close the bag file.
    bag_out.close() # close the bag file.
    
    print('Finished in ' + str(round(tictoc.tocvalue(),2)) + ' seconds.')
    
    