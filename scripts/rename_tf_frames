#!/usr/bin/env python3

import argparse
import os
import time
import rosbag
from pytictoc import TicToc
import geometry_msgs.msg
from tqdm import tqdm

"""
Usage:

./rename_tf_frames -bfi original.bag -ttr frame_1 frame_2 frame_3 -nfn new_frame_1 new_frame_2 new_frame_3

"""

if __name__ == "__main__":
    
    # Parse command line arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-bfi", "--bagfile_in", help='Full path to the bagfile', type=str, required=True)
    ap.add_argument("-bfo", "--bagfile_out", help='Full path to output the bagfile. If not given will be named processed.bag and placed on the same folder as the input bag.', type=str, required=False)
    ap.add_argument("-ftr", "--frames_to_rename", help='Frames to rename in the bag file on the topic /tf. Example: ... -ttr frame_1 frame_2', type=str, required=True,  nargs='+')
    ap.add_argument("-nfn", "--new_frame_names", help="New names for the renamed frames, in the same order of the frames to rename.", type=str, required=True, nargs='+')

    args = vars(ap.parse_args())
    
    if args['bagfile_out'] is None:
        path = os.path.dirname(args['bagfile_in'])
        print(path)
        args['bagfile_out'] = path + '/renamed.bag'
        
    print('Creating a new bag ' + args['bagfile_out'])

    
    # --------------------------------------------------------------------------
    # Read the bag input file
    # --------------------------------------------------------------------------
    bag_file = args['bagfile_in']
    print('Loading bagfile ' + bag_file)
    bag = rosbag.Bag(bag_file) # load the bag file
    bag_info = bag.get_type_and_topic_info()
    bag_types = bag_info[0]
    bag_topics = bag_info[1]

    # --------------------------------------------------------------------------
    # Initial setup
    # --------------------------------------------------------------------------
    tictoc = TicToc()
    tictoc.tic()
    bag_out = rosbag.Bag(args['bagfile_out'], 'w')

    # --------------------------------------------------------------------------
    # Get initial stamp to compute mission time
    # --------------------------------------------------------------------------
    for topic, msg, stamp in bag.read_messages():
        initial_stamp = stamp
        break


    # --------------------------------------------------------------------------
    # Writing new bagfile
    # --------------------------------------------------------------------------
    print('Converting bagfile. Please wait...')
    
    frames_to_rename = args['frames_to_rename']
    new_frame_names = args['new_frame_names']


    for topic, msg, stamp, connection_header in tqdm(bag.read_messages(return_connection_header=True), total=bag.get_message_count(), desc='Processing bag messages'):
        
        if topic == "/tf" and msg.transforms:
            for i in range(len(msg.transforms)):                
                if msg.transforms[i].header.frame_id in frames_to_rename:
                    frame_name_idx = frames_to_rename.index(msg.transforms[i].header.frame_id)
                    msg.transforms[i].header.frame_id = new_frame_names[frame_name_idx]
                    
                if msg.transforms[i].child_frame_id in frames_to_rename:
                    frame_name_idx = frames_to_rename.index(msg.transforms[i].header.child_frame_id)
                    msg.transforms[i].header.child_frame_id = new_frame_names[frame_name_idx]


        bag_out.write(topic, msg, stamp, connection_header=connection_header)
    
    bag.close() # close the bag file.
    bag_out.close() # close the bag file.
    
    print('Finished in ' + str(round(tictoc.tocvalue(),2)) + ' seconds.')