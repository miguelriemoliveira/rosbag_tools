#!/usr/bin/env python3

# stdlib
import argparse
import os
from copy import deepcopy

# 3rd-party
import rosbag
from tqdm import tqdm
from colorama import Fore, Style
from tf2_msgs.msg import TFMessage
from geometry_msgs.msg import TransformStamped, Transform
from pytictoc import TicToc

# local packages

if __name__ == "__main__":

    # --------------------------------------------------------------------------
    # Parse command line arguments
    # --------------------------------------------------------------------------
    ap = argparse.ArgumentParser()
    ap.add_argument("-bfi", "--bagfile_in", help='Full path to the bagfile', type=str, required=True)
    ap.add_argument("-bfo", "--bagfile_out", help='Full path to output the bagfile. If not given will be named processed.bag and placed on the same folder as the input bag.', type=str, required=False)
    # ap.add_argument("-p", "--parent", help='Transform parent', type=str, default='zau/base_link')
    # ap.add_argument("-c", "--child", help='Transform child', type=str, default='base_link')
    ap.add_argument("-p", "--parent", help='Transform parent', type=str, required=True)
    ap.add_argument("-c", "--child", help='Transform child', type=str,required=True)   
    ap.add_argument("-u", "--unsafe", help='Skips several verifications that take time', action='store_true')

    args = vars(ap.parse_args())

    if args['bagfile_out'] is None:
        path = os.path.dirname(args['bagfile_in'])
        print(path)
        args['bagfile_out'] = path + '/processed.bag'

    print('Creating a new bag ' + args['bagfile_out']+ ' where all transforms with parent ' + Fore.BLUE + args['parent'] + Style.RESET_ALL + ' and child ' + Fore.BLUE + args['child'] + Style.RESET_ALL + ' on topic /tf will be moved to topic /tf_static.')

    # --------------------------------------------------------------------------
    # Initial setup
    # --------------------------------------------------------------------------
    tictoc = TicToc()
    tictoc.tic()
    bag_out = rosbag.Bag(args['bagfile_out'], 'w')

    # --------------------------------------------------------------------------
    # Read the bag input file
    # --------------------------------------------------------------------------
    bag_file = args['bagfile_in']
    print('Loading bagfile ' + bag_file)
    bag = rosbag.Bag(bag_file) # load the bag file
    bag_info = bag.get_type_and_topic_info()
    bag_types = bag_info[0]
    bag_topics = bag_info[1]

    # --------------------------------------------------------------------------
    # Get initial stamp to compute mission time
    # --------------------------------------------------------------------------
    for topic, msg, stamp in bag.read_messages():
        initial_stamp = stamp
        break

    # --------------------------------------------------------------------------
    # Get one message with the target transform
    # --------------------------------------------------------------------------
    found_one = False
    target_transform = None
    stop_loop = False

    print('Searching for a tf message with the target transform...')
    for topic, msg, stamp in bag.read_messages():
        mission_time = (stamp - initial_stamp)

        if topic == '/tf':
            for transform_idx, transform in enumerate(msg.transforms): # iterate all transforms
                if transform.header.frame_id == args['parent'] and transform.child_frame_id == args['child']: 
                    # Set a new transform value for rotation
                    # print('Got transform in msg on topic ' + topic + ' with parent ' + transform.header.frame_id + ' and child ' + transform.child_frame_id  + ' at time ' + str((stamp-initial_stamp).to_sec()))
 
                    target_transform = deepcopy(transform)
                    stop_loop = True
                    found_one = True
                    break
        if stop_loop:
            break

    if not found_one:
        print('Error: Did not find transform ' + args['parent'] + ' to ' + args['child'] + ' in bagfile') 
        exit(0)
    else:
        print('Found target transform on /tf topic.')

    # --------------------------------------------------------------------------
    # Check if all target transforms are the same
    # --------------------------------------------------------------------------
    if not args['unsafe']:
        pass # TODO check that transform is always the same

    # --------------------------------------------------------------------------
    # Writing new bagfile
    # --------------------------------------------------------------------------
    print('Converting bagfile. Please wait...')
    num_found = 0
    for topic, msg, stamp, connection_header in tqdm(bag.read_messages(return_connection_header=True), total=bag.get_message_count(), desc='Processing bag messages'):
        mission_time = (stamp - initial_stamp)

        if topic == '/tf':
            idxs_to_remove = []
            for transform_idx, transform in enumerate(msg.transforms): # iterate all transforms 
                if transform.header.frame_id == args['parent'] and \
                    transform.child_frame_id == args['child']:  # search for target transform

                   idxs_to_remove.append(transform_idx) # should remove this transform from the tf msg
                   num_found += 1

            idxs_to_remove.reverse() # remove all target transforms 
            for idx_to_remove in idxs_to_remove: # remove transform from tf message
                del msg.transforms[idx_to_remove]

            if len(msg.transforms) > 0: # 
                bag_out.write(topic, msg, stamp, connection_header=connection_header)

        elif topic == '/tf_static':
            msg.transforms.append(target_transform) # append target transform
            bag_out.write(topic, msg, stamp, connection_header=connection_header)
        else:
            bag_out.write(topic, msg, stamp, connection_header=connection_header)


    bag.close() # close the bag file.
    bag_out.close() # close the bag file.

    # Print final report
    print('Finished in ' + str(round(tictoc.tocvalue(),2)) + ' seconds.')
    print('Created new bagfile ' + Fore.BLUE + args['bagfile_out'] + Style.RESET_ALL + ' in ' + str(round(tictoc.tocvalue(),2)) + ' seconds.')