#!/usr/bin/env python3

import argparse
import os

import rosbag
from colorama import Fore, Style
from pytictoc import TicToc
from tqdm import tqdm

"""
Usage:

./config_camera_intrinsics -bfi original.bag -ct camera/camera_info -d 0.6 -2.2 -0.0 0.0 0.0 -k 2125.6 0.0 1018.8 0.0 2056.6 549.2 0.0 0.0 1.0 -r 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 -p 2210.4 0.0 1025.5 0.0 0.0 2148.7 537.7 0.0 0.0 0.0 1.0 0.0
"""

if __name__ == "__main__":
    # Parse command line arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-bfi", "--bagfile_in", help='Full path to the bagfile', type=str, required=True)
    ap.add_argument("-bfo", "--bagfile_out", help='Full path to output the bagfile. If not given will be named out.bag and placed on the same folder as the input bag.', type=str, required=False)
    ap.add_argument("-ct", "--camera_topic", help='Camera topic. Example: ... -ct camera/camera_info', type=str, required=True)
    ap.add_argument("-d", "--distortion", help='Camera distortion. Example: ... -d 0.6 -2.2 -0.0 0.0 0.0', type=float, required=False, nargs='+')
    ap.add_argument("-k", "--k_matrix", help='Camera k matrix. Example: ... -k 2125.6 0.0 1018.8 0.0 2056.6 549.2 0.0 0.0 1.0', type=float, required=False, nargs='+')
    ap.add_argument("-r", "--r_matrix", help='Camera r matrix. Example: ... -r 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0', type=float, required=False, nargs='+')
    ap.add_argument("-p", "--p_matrix", help='Camera p matrix. Example: ... -p 2210.4 0.0 1025.5 0.0 0.0 2148.7 537.7 0.0 0.0 0.0 1.0 0.0', type=float, required=False, nargs='+')
    
    args = vars(ap.parse_args())
    
    if args['bagfile_out'] is None:
        path = os.path.dirname(args['bagfile_in'])
        args['bagfile_out'] = path + '/out.bag'
    
    distortion = args['distortion']
    k_matrix = args['k_matrix']
    r_matrix = args['r_matrix']
    p_matrix = args['p_matrix']
    
    print('Producing a new bag ' + Fore.BLUE + args['bagfile_out'] + Style.RESET_ALL)

    # --------------------------------------------------------------------------
    # Read the bag input file
    # --------------------------------------------------------------------------
    bag_file = args['bagfile_in']
    print('Loading bagfile ' + bag_file)
    bag = rosbag.Bag(bag_file) # load the bag file
    bag_info = bag.get_type_and_topic_info()
    bag_types = bag_info[0]
    bag_topics = bag_info[1]
    
    # --------------------------------------------------------------------------
    # Initial setup
    # --------------------------------------------------------------------------
    tictoc = TicToc()
    tictoc.tic()
    bag_out = rosbag.Bag(args['bagfile_out'], 'w')
    
    # --------------------------------------------------------------------------
    # Get initial stamp to compute mission time
    # --------------------------------------------------------------------------
    for topic, msg, stamp in bag.read_messages():
        initial_stamp = stamp
        break
    
    # --------------------------------------------------------------------------
    # Writing new bagfile
    # --------------------------------------------------------------------------
    first_time = True # print msg only one time
    print('Converting bagfile. Please wait...')
    for topic, msg, stamp, connection_header in tqdm(bag.read_messages(return_connection_header=True), total=bag.get_message_count(), desc='Processing bag messages'):
        if topic == args['camera_topic']:
            if first_time:
                print(f'\033[1mIntrinsic values from input bag:\033[0m\n{msg}')
            
            if args['distortion']:
                msg.D = list(msg.D)
                msg.D[0] = distortion[0]
                msg.D[1] = distortion[1]
                msg.D[2] = distortion[2]
                msg.D[3] = distortion[3]
                msg.D[4] = distortion[4]
                msg.D = tuple(msg.D)

            if args['k_matrix']:
                msg.K = list(msg.K)
                msg.K[0] = k_matrix[0]
                msg.K[1] = k_matrix[1]
                msg.K[2] = k_matrix[2]
                msg.K[3] = k_matrix[3]
                msg.K[4] = k_matrix[4]
                msg.K[5] = k_matrix[5]
                msg.K[6] = k_matrix[6]
                msg.K[7] = k_matrix[7]
                msg.K[8] = k_matrix[8]
                msg.K = tuple(msg.K)

            if args['r_matrix']:
                msg.R = list(msg.R)
                msg.R[0] = r_matrix[0]
                msg.R[1] = r_matrix[1]
                msg.R[2] = r_matrix[2]
                msg.R[3] = r_matrix[3]
                msg.R[4] = r_matrix[4]
                msg.R[5] = r_matrix[5]
                msg.R[6] = r_matrix[6]
                msg.R[7] = r_matrix[7]
                msg.R[8] = r_matrix[8]
                msg.R = tuple(msg.R)

            if args['p_matrix']:
                msg.P = list(msg.P)
                msg.P[0] = p_matrix[0]
                msg.P[1] = p_matrix[1]
                msg.P[2] = p_matrix[2]
                msg.P[3] = p_matrix[3]
                msg.P[4] = p_matrix[4]
                msg.P[5] = p_matrix[5]
                msg.P[6] = p_matrix[6]
                msg.P[7] = p_matrix[7]
                msg.P[8] = p_matrix[8]
                msg.P[9] = p_matrix[9] 
                msg.P[10] = p_matrix[10]
                msg.P[11] = p_matrix[11]
                msg.P = tuple(msg.P)

            if first_time:
                print(f'\033[1mIntrinsic values written to output bag:\033[0m\n{msg}')
                first_time = False
            
            bag_out.write(topic, msg, stamp, connection_header=connection_header)
        else:
            bag_out.write(topic, msg, stamp, connection_header=connection_header)
    
    bag.close() # close the bag file.
    bag_out.close() # close the bag file.
    
    print('Finished in ' + str(round(tictoc.tocvalue(),2)) + ' seconds.')